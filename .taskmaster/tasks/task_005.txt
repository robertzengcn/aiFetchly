# Task ID: 5
# Title: Develop MCP Tools for Website Email Extraction
# Status: done
# Dependencies: 1, 2
# Priority: medium
# Description: Create MCP tools for extracting email addresses from a list of websites, including `extract_emails_from_website` and `validate_email_list`.
# Details:
Implement the tool logic, which will leverage the existing `BrowserManager` and `EmailExtractionController`. Define the Zod schemas for the tool parameters. Ensure the response format strictly matches the `MCPEmailExtractionResponse` and `MCPEmailValidationResponse` specifications.

# Test Strategy:
Provide a list of test URLs to `extract_emails_from_website` and verify that the tool correctly crawls the sites, extracts emails, and returns them in the specified format. Test the `validate_email_list` tool with a mix of valid, invalid, and disposable emails to check accuracy.

# Subtasks:
## 1. Create Zod Schemas for Email Extraction Tools [done]
### Dependencies: None
### Description: Define Zod schemas for the email extraction MCP tools including extract_emails_from_website and validate_email_list with proper validation for parameters like websites, maxDepth, and email validation options.
### Details:
Create schemas that validate the MCPEmailExtractionRequest interface parameters including websites array, maxDepth, includeSubdomains, excludePatterns, and timeout options. Also create schemas for email validation parameters.

## 2. Implement Email Extraction Response Formatter [done]
### Dependencies: None
### Description: Create a utility function to format the raw output from EmailExtractionController into the standardized MCPEmailExtractionResponse format.
### Details:
Develop a formatter that converts EmailExtractionController results to MCPExtractedEmail format, ensuring consistent response structure with proper field mapping and data validation.

## 3. Implement extract_emails_from_website Tool Handler [done]
### Dependencies: 5.1, 5.2
### Description: Create the MCP tool handler for extract_emails_from_website that validates login state, calls EmailExtractionController, and formats the response.
### Details:
Implement a handler that calls validateLoginState, delegates to EmailExtractionController.handleMCPRequest, and uses the response formatter to return properly structured MCPEmailExtractionData.

## 4. Implement validate_email_list Tool Handler [done]
### Dependencies: 5.1, 5.2
### Description: Create the MCP tool handler for validate_email_list that validates a list of email addresses for validity and checks against disposable email services.
### Details:
Implement a handler that takes a list of email addresses, validates their format, checks against known disposable email services, and returns validation results with confidence scores.

## 5. Register Email Extraction Tools with MCP Server [done]
### Dependencies: 5.3, 5.4
### Description: Register the email extraction tools with the MCP server's tool registry to make them available to MCP clients.
### Details:
Combine the Zod schemas and handler functions to create complete tool objects for extract_emails_from_website and validate_email_list, then register them with the MCP server.

